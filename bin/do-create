#!/usr/bin/env python3
# desc = personal DO cli
# https://developers.digitalocean.com/documentation/v2/
import json
from pprint import pprint
import os
import sys
import requests

try:
    api_token = os.environ['DO_API_TOKEN']
except:
    print("Missing environment variable `DO_API_TOKEN`", file=sys.stderr)
    sys.exit(1)

headers = {
        "Content-Type": "application/json",
    "Authorization": f"Bearer {api_token}"}

def list_droplets():
    url = "https://api.digitalocean.com/v2/droplets"
    r = requests.get(url, headers=headers)
    json_res = r.json()
    print("name\t distro\t ip")
    for drop in json_res['droplets']:
        print(f"{drop['name']}\t{drop['image']['distribution']}\t{drop['networks']['v4'][0]['ip_address']}")

def list_projects():
    url = "https://api.digitalocean.com/v2/projects"
    r = requests.get(url, headers=headers)
    json_res = r.json()
    pprint(json_res)

def list_ssh_keys():
    url = "https://api.digitalocean.com/v2/account/keys"
    r = requests.get(url, headers=headers)
    json_res = r.json()
    pprint(json_res)


def get_droplet_list():
    url = "https://api.digitalocean.com/v2/droplets"
    r = requests.get(url, headers=headers)
    droplet_ids = []
    json_res = r.json()
    for i in json_res['droplets']:
        if i['id'] != None:
            droplet_ids.append(i['id'])

    return droplet_ids

def create_droplet():
    url = "https://api.digitalocean.com/v2/droplets"
    parameters = {
                    "name":"dev.plaintext.online",
                    "region":"nyc3",
                    "size":"s-1vcpu-1gb",
                    "image":"debian-10-x64",
                    "ssh_keys":[27213896],
                    "backups":False,
                    "ipv6":False,
                    "tags":["web"],
                }

    r = requests.post(url, headers=headers, data=json.dumps(parameters))
    res_json = r.json()
    print(f"Successfully created {res_json['droplet']['id']}")
    move_droplet(res_json['droplet']['id'])

def delete_droplets(droplet_list):
    for i in droplet_list:
        url = f"https://api.digitalocean.com/v2/droplets/{i}"
        print(f"Deleteing droplet {i} at {url}")
        r = requests.delete(url, headers=headers)
        if r.status_code == 204:
            print("Successfully deleted")
        else:
            print("Error deleting")
            print("Status code", r.status_code)

def move_droplet(droplet_id):
    data2 = {
            "resources": [f"do:droplet:{droplet_id}"]
            }
    url2 = "https://api.digitalocean.com/v2/projects/2497188a-7a9f-40b7-9634-21d2c11ceffe/resources"
    r2 = requests.post(url2, headers=headers, data=json.dumps(data2))
    res_json = r2.json()
    print(f"Successfully moved {droplet_id} to plaintext.online project")


def delete_all_droplets():
    pass



def cli_error_message():
    print("Usage: ./do-create.py <command>")
    print("Possible commands: create, delete-all, list-droplets, list-projects, list-keys")
    sys.exit(1)

def simple_cli():
    try:
        arg = sys.argv[1]
    except Exception as e:
        cli_error_message()

    if arg == "delete-all":
        droplets = get_droplet_list()
        delete_droplets(droplets)
    elif arg == "create":
        create_droplet()
    elif arg == "list-droplets":
        list_droplets()
    elif arg == "list-projects":
        list_projects()
    elif arg == "list-keys":
        list_ssh_keys()
    else:
        cli_error_message()




simple_cli()
